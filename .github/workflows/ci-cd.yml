# =========================================================================
# TRADINO UNSCHLAGBAR - GitHub Actions CI/CD Pipeline
# Automated testing, building, and deployment pipeline
# =========================================================================

name: 🚀 TRADINO CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 0'  # Weekly security scan

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  # ==================
  # CODE QUALITY & TESTING
  # ==================
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        test-type: [unit, integration]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: tradino_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements.txt

      - name: 🔍 Code Quality Checks
        run: |
          # Code formatting
          black --check --diff .
          
          # Import sorting
          isort --check-only --diff .
          
          # Linting
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
          # Type checking
          mypy tradino_unschlagbar/ --ignore-missing-imports

      - name: 🔒 Security Scan
        run: |
          # Security vulnerability scan
          bandit -r . -f json -o bandit-report.json || true
          
          # Dependency vulnerability scan
          safety check --json --output safety-report.json || true

      - name: 🧪 Run ${{ matrix.test-type }} Tests
        env:
          POSTGRES_URL: postgresql://postgres:test_password@localhost:5432/tradino_test
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            pytest tests/unit/ -v --cov=tradino_unschlagbar --cov-report=xml --cov-report=html
          else
            pytest tests/integration/ -v --maxfail=3
          fi

      - name: 📊 Upload Coverage
        if: matrix.test-type == 'unit' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📋 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
          path: |
            pytest-report.xml
            coverage.xml
            htmlcov/
            bandit-report.json
            safety-report.json

  # ==================
  # DOCKER BUILD
  # ==================
  build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_COMMIT=${{ github.sha }}
            ENVIRONMENT=production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 🔍 Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Security Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==================
  # STAGING DEPLOYMENT
  # ==================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.nobelbrett.com

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 📋 Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_STAGING }}

      - name: 🔄 Deploy to Staging
        run: |
          # Update image tag in deployment
          sed -i "s|tradino:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" deploy/kubernetes/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f deploy/kubernetes/namespace.yaml
          kubectl apply -f deploy/kubernetes/configmap.yaml
          kubectl apply -f deploy/kubernetes/secrets.yaml --namespace=tradino-staging
          kubectl apply -f deploy/kubernetes/deployment.yaml --namespace=tradino-staging
          kubectl apply -f deploy/kubernetes/services.yaml --namespace=tradino-staging
          
          # Wait for deployment
          kubectl rollout status deployment/tradino-app --namespace=tradino-staging --timeout=300s

      - name: 🧪 Health Check
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/tradino-app --namespace=tradino-staging
          
          # Get service URL and test
          SERVICE_URL=$(kubectl get svc tradino-app-service --namespace=tradino-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f http://$SERVICE_URL:8000/health || exit 1

  # ==================
  # PRODUCTION DEPLOYMENT
  # ==================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://nobelbrett.com

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 📋 Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_PROD }}

      - name: 💾 Database Backup
        run: |
          # Create pre-deployment backup
          kubectl create job tradino-backup-$(date +%Y%m%d-%H%M%S) \
            --from=cronjob/tradino-backup --namespace=tradino-production

      - name: 🔄 Deploy to Production
        run: |
          # Update image tag in deployment
          sed -i "s|tradino:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}|g" deploy/kubernetes/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f deploy/kubernetes/namespace.yaml
          kubectl apply -f deploy/kubernetes/configmap.yaml
          kubectl apply -f deploy/kubernetes/deployment.yaml
          kubectl apply -f deploy/kubernetes/services.yaml
          
          # Rolling update with zero downtime
          kubectl rollout status deployment/tradino-app --namespace=tradino-production --timeout=600s

      - name: 🧪 Production Health Check
        run: |
          # Comprehensive health check
          kubectl wait --for=condition=available --timeout=300s deployment/tradino-app --namespace=tradino-production
          
          # Test all endpoints
          curl -f https://nobelbrett.com/health || exit 1
          curl -f https://nobelbrett.com/api/health || exit 1
          curl -f https://monitoring.nobelbrett.com/grafana/api/health || exit 1

      - name: 📢 Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # ==================
  # SECURITY MONITORING
  # ==================
  security-scan:
    name: 🔒 Security Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Dependency Scan
        uses: ossf/scorecard-action@v2
        with:
          results_file: results.sarif
          results_format: sarif
          repo_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Upload Security Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif 